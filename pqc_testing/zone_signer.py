#!/usr/bin/python3

"""
DNS signature testing tool

Args:
    none

Defined Variables:
    app_path -  Location of the ldns tools (ldns-keygen, ldns-signzone, ldns-verify-zone)
    main:zone_template_file - Name of the zone template file
    main:working_directory  - Path to the temporary working files (keys, zones, etc...)

Output:
    Comma separated value table of metrics from key gen, sign, verify
"""

import subprocess
import glob
import os
import time
import base64
import sys


# The algorithms to test by ID, common name, and LDNS algorithm string
algorithm_list = {
    "RSA": {"id": "008", "lbl": "RSASHA256"},
    "ECDSA": {"id": "013", "lbl": "ECDSAP256SHA256"},
    "fl-dsa": {"id": "244", "lbl": "FL_DSA_512"},
    "ml-dsa": {"id": "245", "lbl": "ML_DSA_44"},
    "slh-dsa-sha": {"id": "246", "lbl": "SLH_DSA_SHA2_128s"},
    "slh-dsa-shake": {"id": "247", "lbl": "SLH_DSA_SHAKE_128s"},
    "slh-dsa-mtl-sha": {"id": "248", "lbl": "SLH_DSA_MTL_SHA2_128s"},
    "slh-dsa-mtl-shake": {"id": "249", "lbl": "SLH_DSA_MTL_SHAKE_128s"},
}


app_path = "/usr/local/bin/"
# app_path = ""   #let PATH handle everything
#                 #TODO: to make it more robust, use a subprocess call to "which ldns_*" here instead

def clear_working_directory(path):
    """
    Remove the working files generated by this program
    """
    working_file_types = [".zone", ".signed", ".ds", ".key", ".private"]

    for filename in os.listdir(path):
        _, file_extension = os.path.splitext(filename)
        if file_extension in working_file_types:
            os.remove(os.path.join(path, filename))


def generate_zone_template(templatefile, algorithm, path):
    """
    Generate the template zone for the given algorithm
    """
    template_label = "pqc_zone_template"

    zonefile = (
        templatefile.lower()
        .replace("zonetemplate", "zone")
        .replace(template_label, algorithm.lower())
    )

    if not os.path.isfile(os.path.join(path, templatefile)):
        print(f"  ERROR: Template file {templatefile} does not exist!")
        return None
    if os.path.isfile(os.path.join(path, zonefile)):
        print(f"  ERROR: Zone file {zonefile} exists!")
        return None

    with open(os.path.join(path, templatefile), "r") as template, open(
        os.path.join(path, zonefile), "w"
    ) as zone:
        for line in template:
            zone.write(line.replace(template_label, algorithm.lower()))

    return zonefile.replace(".zone", "")


def generate_zone_keys(zone_name, algo_name, algo_id_str, path):
    """
    Generate the keys for the given algorithm and collect metrics
    """
    results = {}

    # Generate the zsk
    start = time.time()
    result = subprocess.run(
        [f"{app_path}ldns-keygen", "-b", "2048", "-a", algo_id_str, zone_name],
        cwd=path,
        stdout=subprocess.PIPE,
    )
    results["zsk_time"] = time.time() - start
    key_string = result.stdout.decode().strip()
    results["zsk_key_name"] = key_string
    results["zsk_priv_size"] = os.path.getsize(
        os.path.join(path, f"{key_string}.private")
    )

    with open(os.path.join(path, f"{key_string}.key"), "r") as pubkey:
        record = pubkey.readline()
        results["zsk_pub_size"] = len(base64.b64decode(record.split()[6]))

    start = time.time()
    result = subprocess.run(
        [f"{app_path}ldns-keygen", "-k", "-b", "2048", "-a", algo_id_str, zone_name],
        cwd=path,
        stdout=subprocess.PIPE,
    )
    results["ksk_time"] = time.time() - start
    key_string = result.stdout.decode().strip()
    results["ksk_key_name"] = key_string
    results["ksk_priv_size"] = os.path.getsize(
        os.path.join(path, f"{key_string}.private")
    )

    with open(os.path.join(path, f"{key_string}.key"), "r") as pubkey:
        record = pubkey.readline()
        results["ksk_pub_size"] = len(base64.b64decode(record.split()[6]))

    return results


def sign_zone(zone_name, key_list, path, nsec3=False):
    """
    Sign the algorithm specific zones with the appropriate keys for each algorithm
    """
    results = {}

    start = time.time()
    input_file = f"{zone_name}.zone"
    output_file = f"{input_file}.signed"
    if nsec3:
        result = subprocess.run(
            [f"{app_path}ldns-signzone", "-n", input_file, "-f", output_file]
            + key_list,
            cwd=path,
            stdout=subprocess.PIPE,
        )
    else:
        result = subprocess.run(
            [f"{app_path}ldns-signzone", input_file, "-f", output_file] + key_list,
            cwd=path,
            stdout=subprocess.PIPE,
        )
    sign_time = time.time() - start

    if result.returncode != 0:
        print(f" !!! Signing failed {result.returncode}")
        print(
            f"    Command - {' '.join([f'{app_path}ldns-signzone',input_file,'-f',output_file] + key_list)}"
        )
        sys.exit(1)
    else:
        zone_size = os.path.getsize(os.path.join(path, input_file))
        signed_zone_size = os.path.getsize(os.path.join(path, output_file))

        results["sign_time"] = sign_time
        results["source_size_mb"] = zone_size / 1024 / 1024
        results["sign_size_mb"] = signed_zone_size / 1024 / 1024

    return results


def verify_zone(zone_name, key_list, path):
    """
    Verify the algorithm specific zones with the appropriate keys for each algorithm
    """
    results = {}

    verify_keys = []
    for k in key_list:
        verify_keys.append("-k")
        verify_keys.append(f"{k}.ds")

    start = time.time()
    result = subprocess.run(
        [f"{app_path}ldns-verify-zone", f"{zone_name}.zone.signed", "-S"] + verify_keys,
        cwd=path,
        stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL,
    )
    verify_time = time.time() - start
    if result.returncode != 0:
        print(f" !!! Verify failed {result.returncode}")
        print(
            f"    Command - {' '.join([f'{app_path}ldns-verify-zone',f'{zone_name}.zone.signed','-S'] + verify_keys)}"
        )
        sys.exit(1)

    results["verify_time"] = verify_time

    return results


def main():
    test_zone = "example.com."
    zone_template_file = "pqc_zone_template.example.com.zonetemplate"
    working_directory = "results"
    metrics = {}

    # Clear terminal output
    os.system("cls" if os.name == "nt" else "clear")

    # Clear the working files
    print(f"zone_signer: Cleaning the working directory {working_directory}")
    clear_working_directory(working_directory)

    # For algorithms in the list
    for algo in algorithm_list:
        print(f"zone_signer: Performing tests for {algo.upper()}")
        # Create the zone file
        zone_name = generate_zone_template(zone_template_file, algo, working_directory)
        if zone_name == None:
            print(f"ERROR: Unable to create the zone file for {algo}")

        # Generate the keys
        metrics[algo] = {}
        zsk_list = []
        ksk_list = []
        metrics[algo]["keygen"] = generate_zone_keys(
            zone_name, algo, algorithm_list[algo]["lbl"], working_directory
        )
        zsk_list.append(metrics[algo]["keygen"]["zsk_key_name"])
        ksk_list.append(metrics[algo]["keygen"]["ksk_key_name"])

        # Test Signing
        metrics[algo]["sign"] = sign_zone(
            zone_name, zsk_list + ksk_list, working_directory, nsec3=False
        )

        # Test Verifying
        metrics[algo]["verify"] = verify_zone(zone_name, ksk_list, working_directory)

    print("")
    print("")

    # Print the resutls
    print(
        f"Algorithm,Time to Sign (seconds),Time to Verify (seconds),Signed Zone Size (MB),Public Key Size (bytes)"
    )
    for a in metrics:
        ametric = metrics[a]
        print(
            f"{a.upper()},{ametric['sign']['sign_time']:0.1f},{ametric['verify']['verify_time']:0.1f},{ametric['sign']['sign_size_mb']:0.2f},{ametric['keygen']['zsk_pub_size']}"
        )


if __name__ == "__main__":
    main()
